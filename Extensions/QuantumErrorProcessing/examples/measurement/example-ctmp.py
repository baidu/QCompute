# !/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2022 Baidu, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This example demonstrates how to use the CTMP method to
improve the accuracy of the outcomes generated by a noisy quantum computer.
"""
from qiskit.providers.fake_provider import FakeQuito
from QCompute import *
from Extensions.QuantumErrorProcessing.qcompute_qep.measurement.correction import CTMPCorrector
from Extensions.QuantumErrorProcessing.qcompute_qep.utils import execute

# Set the default number of shots
NUMBER_OF_SHOTS = 8192
# Set the default number of qubits
NUMBER_OF_QUBITS = 5


##########################################################################################
# Setup the quantum program for the Bell state.
##########################################################################################
# qp is short for "quantum program", instance of QProgram
def quantum_program(number_of_qubit: int):
    """
    A quantum program to generate a Bell state.
    :param number_of_qubit: number of qubits
    :return: quantum program
    """
    qp = QEnv()
    qp.Q.createList(number_of_qubit)
    H(qp.Q[0])
    CX(qp.Q[0], qp.Q[1])
    MeasureZ(*qp.Q.toListPair())
    return qp


##########################################################################################
# Set the quantum hardware for running the Bell circuit.
##########################################################################################
# For numeric test on the ideal simulator, change qc to BackendName.LocalBaiduSim2
# qc = BackendName.LocalBaiduSim2

# For experiment on the real quantum device, change qc to BackendName.CloudBaiduQPUQian.
# You must set your VIP token first in order to access the Baidu hardware.
# Define.hubToken = "Token"
# qc = BackendName.CloudBaiduQPUQian

# For numeric test on the noisy simulator, change qc to Qiskit's FakeQuito simulator
qc = FakeQuito()

##########################################################################################
# Execute the quantum program on the quantum computer and mitigate the results.
##########################################################################################
# Obtain the noisy counts
noisy_counts = execute(quantum_program(NUMBER_OF_QUBITS), qc, shots=NUMBER_OF_SHOTS)
# Use the measurement mitigation procedure to correct the outcomes
# You may choose other calibrators and correctors for better results.
corrector = CTMPCorrector(qc, calibrator='ctmp', qubits=range(NUMBER_OF_QUBITS))
counts = corrector.correct(noisy_counts)

ideal_counts = execute(quantum_program(NUMBER_OF_QUBITS), qc, shots=NUMBER_OF_SHOTS)

print("Noisy Counts: {}".format(noisy_counts))
print("Corrected Counts: {}".format(counts))
print("ideal Counts: {}".format(ideal_counts))
